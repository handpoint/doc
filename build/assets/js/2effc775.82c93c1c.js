"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7892],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return k}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),p=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=p(t.components);return a.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),m=p(n),k=r,c=m["".concat(s,".").concat(k)]||m[k]||u[k]||i;return n?a.createElement(c,l(l({ref:e},d),{},{components:n})):a.createElement(c,l({ref:e},d))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5075:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:7,id:"iostransactions"},s="Transactions",p={unversionedId:"iostransactions",id:"version-iOS SDK 4.0.0/iostransactions",title:"Transactions",description:"Sale",source:"@site/ios_versioned_docs/version-iOS SDK 4.0.0/iostransactions.md",sourceDirName:".",slug:"/iostransactions",permalink:"/doc/ios/iOS SDK 4.0.0/iostransactions",tags:[],version:"iOS SDK 4.0.0",sidebarPosition:7,frontMatter:{sidebar_position:7,id:"iostransactions"},sidebar:"version-iOS SDK 4.0.0/tutorialSidebar",previous:{title:"SDK integration example",permalink:"/doc/ios/iOS SDK 4.0.0/iossdkprocessing"},next:{title:"Device management",permalink:"/doc/ios/iOS SDK 4.0.0/iosdevicemanagement"}},d=[{value:"Sale",id:"2",children:[],level:2},{value:"Sale Reversal",id:"3",children:[],level:2},{value:"Sale And Tokenize Card",id:"4",children:[],level:2},{value:"Refund",id:"5",children:[],level:2},{value:"Refund reversal",id:"6",children:[],level:2},{value:"Accept signature",id:"7",children:[],level:2},{value:"Retrieve Pending Transaction",id:"8",children:[],level:2},{value:"Tip Adjustment",id:"9",children:[],level:2},{value:"Tokenize Card",id:"10",children:[],level:2}],u={toc:d};function m(t){var e=t.components,n=(0,r.Z)(t,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"transactions"},"Transactions"),(0,i.kt)("h2",{id:"2"},"Sale"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"saleWithAmount")),(0,i.kt)("p",null,"A sale initiates a payment operation to the card reader. In it's simplest form you only have to pass the ",(0,i.kt)("strong",{parentName:"p"},"amount")," and ",(0,i.kt)("strong",{parentName:"p"},"currency")," but it also accepts tip configuration and a map with extra parameters."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amount")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSInteger")),(0,i.kt)("td",{parentName:"tr",align:null},"Amount of funds to charge - in the minor unit of currency (f.ex. 1000 is 10.00 GBP)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"currency ")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSString")),(0,i.kt)("td",{parentName:"tr",align:null},"3 letter currency code in accordance to ISO4217")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"options")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"SaleOptions")),(0,i.kt)("td",{parentName:"tr",align:null},"An object to store all the customization options for a sale.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'//If you just need a plain vanilla sale:\n[api saleWithAmount:100\n           currency:Currency.EUR.alpha];\n\n//But you can customize your sale:\nSaleOptions *options = [SaleOptions new];\n//Optionally\noptions.customerReference = @"Your customer reference";\n//If you need Multi MID / Custom merchant Authentication:\nMerchantAuth *auth = [MerchantAuth new];\nCredential *cred = [Credential new];\n//Optionally\ncred.acquirer = [Credential getAcquirerFromString:@"acquirer"];\n//Optionally\ncred.mid = @"mid";\n//Optionally\ncred.tid = @"tid";\n//Add as many credentials as Acquirers your merchant have agreements with\n[auth add:cred];\noptions.merchantAuth = auth;\n//If you want to specify the budget period\n//Only available for SureSwipe\n//Here it\'s 3 months\noptions.divideByMonths = @"3";\n\n[api saleWithAmount:100\n           currency:Currency.EUR.alpha\n            options:options];\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Events invoked")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#14"},(0,i.kt)("strong",{parentName:"a"},"responseStatus"))),(0,i.kt)("p",null,"Invoked while during transaction with different statuses from card reader."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#15"},(0,i.kt)("strong",{parentName:"a"},"responseError"))),(0,i.kt)("p",null,"Invoked to inform when an error response happens."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#17"},(0,i.kt)("strong",{parentName:"a"},"requestSignature"))),(0,i.kt)("p",null,"Invoked if card verification requires signature."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#16"},(0,i.kt)("strong",{parentName:"a"},"responseFinanceStatus "))),(0,i.kt)("p",null,"Invoked when the card reader finishes processing the transaction"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"YES")," if operation starts successfully.")))),(0,i.kt)("h2",{id:"3"},"Sale Reversal"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"saleVoidWithAmount")),(0,i.kt)("p",null,"Request a void operation on previous sale transaction, referred to by the parameter transaction. Parameters amount, currency and present must be the same as the in the sale to be voided. This operation reverts (if possible) a specific sale identified with a transaction id. Note that transactions can only be reversed within the same day as the transaction was made."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amount")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSInteger")),(0,i.kt)("td",{parentName:"tr",align:null},"Amount of funds to charge - in the minor unit of currency (f.ex. 1000 is 10.00 GBP)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"currency")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSString")),(0,i.kt)("td",{parentName:"tr",align:null},"3 letter currency code in accordance to ISO4217")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"transaction")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,i.kt)("br",null)," ",(0,i.kt)("em",{parentName:"td"},"NSString")),(0,i.kt)("td",{parentName:"tr",align:null},"TransactionID of the sale transaction to be voided")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"options")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"Options")),(0,i.kt)("td",{parentName:"tr",align:null},"An object to store all the customization options for this operation.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'//If you just need a plain vanilla sale reversal:\n[api saleReversalWithAmount:100\n                   currency:Currency.EUR.alpha\n              transactionId:originalTransactionID\n                    options:options];\n\n//But you can customize your sale:\nOptions *options = [Options new];\n//Optionally\noptions.customerReference = @"Your customer reference";\n\n[api saleReversalWithAmount:100\n                   currency:Currency.EUR.alpha\n              transactionId:@"00000000-0000-0000-0000-000000000000"\n                    options:options];\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Events invoked")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#14"},(0,i.kt)("strong",{parentName:"a"},"responseStatus"))),(0,i.kt)("p",null,"Invoked while during transaction with different statuses from card reader"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#15"},(0,i.kt)("strong",{parentName:"a"},"responseError "))),(0,i.kt)("p",null,"Invoked to inform when an error response happens."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#16"},(0,i.kt)("strong",{parentName:"a"},"responseFinanceStatus"))),(0,i.kt)("p",null,"Invoked when the card reader finishes processing the transaction"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"YES")," if operation starts successfully.")))),(0,i.kt)("h2",{id:"4"},"Sale And Tokenize Card"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"saleAndTokenizeCardWithAmount")),(0,i.kt)("p",null,"A sale initiates a payment operation to the card reader."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amount")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSInteger")),(0,i.kt)("td",{parentName:"tr",align:null},"Amount of funds to charge - in the minor unit of currency (f.ex. 1000 is 10.00 GBP)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"currency")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSString")),(0,i.kt)("td",{parentName:"tr",align:null},"3 letter currency code in accordance to ISO4217")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"options")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"SaleOptions")),(0,i.kt)("td",{parentName:"tr",align:null},"An object to store all the customization options for a sale.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'//If you just need a plain vanilla sale tokenization:\n[api saleAndTokenizeWithAmount:100\n                      currency:Currency.EUR.alpha];\n\n//But you can customize your sale:\nSaleOptions *options = [SaleOptions new];\n//Optionally\noptions.customerReference = @"Your customer reference";\n//If you need Multi MID / Custom merchant Authentication:\nMerchantAuth *auth = [MerchantAuth new];\nCredential *cred = [Credential new];\n//Optionally\ncred.acquirer = [Credential getAcquirerFromString:@"acquirer"];\n//Optionally\ncred.mid = @"mid";\n//Optionally\ncred.tid = @"tid";\n//Add as many credentials as Acquirers your merchant have agreements with\n[auth add:cred];\noptions.merchantAuth = auth;\n//If you want to specify the budget period\n//Only available for SureSwipe\n//Here it\'s 3 months\noptions.divideByMonths = @"3";\n\n[api saleAndTokenizeWithAmount:100\n                      currency:Currency.EUR.alpha\n                       options:options];\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Events invoked")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#14"},(0,i.kt)("strong",{parentName:"a"},"responseStatus"))),(0,i.kt)("p",null,"Invoked while during transaction with different statuses from card reader"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#15"},(0,i.kt)("strong",{parentName:"a"},"responseError"))),(0,i.kt)("p",null,"Invoked to inform when an error response happens."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#17"},(0,i.kt)("strong",{parentName:"a"},"requestSignature"))),(0,i.kt)("p",null,"Invoked if card verification requires signature."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#16"},(0,i.kt)("strong",{parentName:"a"},"responseFinanceStatus"))),(0,i.kt)("p",null,"Invoked when the card reader finishes processing the transaction"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"YES")," if operation starts successfully.")))),(0,i.kt)("h2",{id:"5"},"Refund"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"refundWithAmount")),(0,i.kt)("p",null,"A refund initiates a refund operation to the card reader. This operation moves funds from your account to the cardholders credit card."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amount")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSInteger")),(0,i.kt)("td",{parentName:"tr",align:null},"Amount of funds to charge - in the minor unit of currency (f.ex. 1000 is 10.00 GBP)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"currency")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSString")),(0,i.kt)("td",{parentName:"tr",align:null},"Currency of the charge")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"transaction")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSString")),(0,i.kt)("td",{parentName:"tr",align:null},"If present it links the refund with a previous sale. It effectively limits the maximum amount refunded to that of the original transaction.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"options")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"MerchantAuthOptions")),(0,i.kt)("td",{parentName:"tr",align:null},"An object to store all the customization options for a refund.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'//If you just need a plain vanilla refund:\n[api refundWithAmount:100\n             currency:Currency.EUR.alpha\n          transaction:@"00000000-0000-0000-0000-000000000000"];\n\n//But you can customize your sale:\nMerchantAuthOptions *options = [MerchantAuthOptions new];\n//Optionally\noptions.customerReference = @"Your customer reference";\n//If you need Multi MID / Custom merchant Authentication:\nMerchantAuth *auth = [MerchantAuth new];\nCredential *cred = [Credential new];\n//Optionally\ncred.acquirer = [Credential getAcquirerFromString:@"acquirer"];\n//Optionally\ncred.mid = @"mid";\n//Optionally\ncred.tid = @"tid";\n//Add as many credentials as Acquirers your merchant have agreements with\n[auth add:cred];\noptions.merchantAuth = auth;\n\n[api refundWithAmount:100\n             currency:Currency.EUR.alpha\n          transaction:@"00000000-0000-0000-0000-000000000000"\n              options:options];\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Events invoked")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#14"},(0,i.kt)("strong",{parentName:"a"},"responseStatus"))),(0,i.kt)("p",null,"Invoked while during transaction with different statuses from card reader"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#15"},(0,i.kt)("strong",{parentName:"a"},"responseError"))),(0,i.kt)("p",null,"Invoked when the card reader finishes processing the transaction"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#16"},(0,i.kt)("strong",{parentName:"a"},"responseFinanceStatus"))),(0,i.kt)("p",null,"Invoked to inform when an error response happens."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"YES")," if operation starts successfully.")))),(0,i.kt)("h2",{id:"6"},"Refund reversal"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"refundVoidWithAmount")),(0,i.kt)("p",null,"Request a void operation on previous refund transaction, referred to by the parameter transaction. Parameters amount, currency and present must be the same as the in the refund to be voided. This operation reverts (if possible) a specific refund identified with a transaction id. Note that transactions can only be reversed within the same day as the transaction was made."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amount")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSInteger")),(0,i.kt)("td",{parentName:"tr",align:null},"Amount of funds to charge - in the minor unit of currency (f.ex. 1000 is 10.00 GBP)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"currency")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSString")),(0,i.kt)("td",{parentName:"tr",align:null},"3 letter currency code in accordance to ISO4217")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"transaction")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSString")),(0,i.kt)("td",{parentName:"tr",align:null},"TransactionID of the refund transaction to be voided")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"options")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"Options")),(0,i.kt)("td",{parentName:"tr",align:null},"An object to store all the customization options for this operation.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'//If you just need a plain vanilla refund reversal:\n[api refundReversalWithAmount:100\n                    currency:Currency.EUR.alpha\n               transactionId:originalTransactionID\n                     options:options];\n\n//But you can customize your sale:\nOptions *options = [Options new];\n//Optionally\noptions.customerReference = @"Your customer reference";\n\n[api refundReversalWithAmount:100\n                     currency:Currency.EUR.alpha\n                transactionId:@"00000000-0000-0000-0000-000000000000"\n                      options:options];\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Events invoked")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#14"},(0,i.kt)("strong",{parentName:"a"},"responseStatus"))),(0,i.kt)("p",null,"Invoked while during transaction with different statuses from card reader"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#15"},(0,i.kt)("strong",{parentName:"a"},"responseError"))),(0,i.kt)("p",null,"Invoked to inform when an error response happens."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#16"},(0,i.kt)("strong",{parentName:"a"},"responseFinanceStatus"))),(0,i.kt)("p",null,"Invoked when the card reader finishes processing the transaction"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"YES")," if the operation was successfully sent to device.")))),(0,i.kt)("h2",{id:"7"},"Accept signature"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"acceptSignature")),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#17"},(0,i.kt)("em",{parentName:"a"},"requestSignature"))," event is invoked during transaction when signature verification is needed (f.ex when payment is done with a magstripe card). The merchant is required to ask the cardholder for signature and approve (or disapprove) the signature. signatureRequired tells the card reader if the signature was approved by passing YES. To disapprove then NO is passed."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"flag")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"Boolean")),(0,i.kt)("td",{parentName:"tr",align:null},"YES if signature is valid, NO otherwise")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"//acceptSignature:\n//Inform the card reader if signature is valid or not\n-(IBAction)accept\n{\n    [heftClient acceptSignature:YES];\n}\n-(IBAction)decline\n{\n    [heftClient acceptSignature:NO];\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Events invoked")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#14"},(0,i.kt)("strong",{parentName:"a"},"responseStatus"))),(0,i.kt)("p",null,"Invoked while during transaction with different statuses from card reader"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#15"},(0,i.kt)("strong",{parentName:"a"},"responseError"))),(0,i.kt)("p",null,"Invoked to inform when an error response happens."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#16"},(0,i.kt)("strong",{parentName:"a"},"responseFinanceStatus"))),(0,i.kt)("p",null,"Invoked when the card reader finishes processing the transaction"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"8"},"Retrieve Pending Transaction"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"retrievePendingTransaction")),(0,i.kt)("p",null,"Retrieving a pending transaction fetches a transaction result that was lost due to unexpected disconnect between card reader and application."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"//retrievePendingTransaction:\n//Called when a pending transaction is discovered upon connecting to a specific card reader\n- (void)didConnect:(id<HeftClient>)client{\n    heftClient = client;\n\n    if(heftClient){\n        if([heftClient isTransactionResultPending] == YES) {\n            // a pending transaction has been detected ...\n            // ... so, lets get it\n            [heftClient retrievePendingTransaction];\n        }\n    }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Events invoked")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#14"},(0,i.kt)("strong",{parentName:"a"},"responseStatus"))),(0,i.kt)("p",null,"Invoked during the operation with different statuses from the card reader."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#15"},(0,i.kt)("strong",{parentName:"a"},"responseError"))),(0,i.kt)("p",null,"Invoked to inform when an error response happens."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#44"},(0,i.kt)("strong",{parentName:"a"},"responseRecoveredTransactionStatus"))),(0,i.kt)("p",null,"Invoked when the card reader has returned a recovered transaction."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"YES")," if operation starts successfully.")))),(0,i.kt)("br",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Card Reader Requirements")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Version Requirements"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Card reader software v1.7.0+ and v2.1.7+ is required in order for this method to work")))),(0,i.kt)("br",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Notes")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"On starting a new transaction"))),(0,i.kt)("p",null,"If a new transaction is started with out first fetching a pending transaction result, then the pending transaction result will be discarded."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"User notifications while a transaction result is pending"))),(0,i.kt)("p",null,"The card reader will not give any visible indication that a transaction result is pending."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"User notifications when fetching a pending transaction result"))),(0,i.kt)("p",null,"The card reader will briefly display a message when a pending transaction result is recovered."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"9"},"Tip Adjustment"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"tipAdjustment")),(0,i.kt)("p",null,"A tip adjustment operation allows merchants to adjust the tip amount of a sale transaction before the batch of transactions is settled automatically by the processor at the end of the day.\nNote: This functionality is only available for the restaurant industry in the United States and the processors currently supporting this functionality are TSYS and VANTIV.\nThe tip adjustment method does not rely on a card reader and is therefore a separate method that must be initialized with a shared secret. The function is defined in the file HapiRemoteService.h"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tipAmount")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSInteger")),(0,i.kt)("td",{parentName:"tr",align:null},"Tip amount added to the original (base) transaction amount - in the minor unit of currency (f.ex. 1000 is 10.00 GBP)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"transaction")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required")," ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSString")),(0,i.kt)("td",{parentName:"tr",align:null},"TransactionID (GUID) of the original sale transaction to be adjusted")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'//First, you need to include the following dependency\n#include "HapiRemoteService.h"\n\n//Second, the shared secret needs to be initialized\nNSString* shared_secret = @"0102030405060708091011121314151617181920212223242526272829303132";\nBOOL result = setupHandpointApiConnection(shared_secret);\n\n//Third, you need to retrieve the unique transaction id of the original sale transaction you want to adjust. The below GUID is only an example and will result in a decline from the host if used for tip adjustment\nNSString* transaction = @"d50af540-a1b0-11e6-85e6-07b2a5f091ec";\n\n//Fourth, let\'s tip adjust a transaction for $10.00!\n-(IBAction)tipAdjustment:(UIButton*) sender\n{\n    BOOL result = tipAdjustment(transaction, 1000, ^(TipAdjustmentStatus status)\n    {\n        if(status == TipAdjustmentAuthorised) {\n\n            //Successfully adjusted!\n\n        }\n\n        else if(status == TipAdjustmentDeclined) {\n\n            //Declined!\n\n        }\n\n        else if(status == TipAdjustmentFailed) {\n\n            //Timeout!\n\n        }\n    });\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("p",null,"Result of the tip adjustment transaction, possible values :"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"status")),(0,i.kt)("td",{parentName:"tr",align:null},"- ",(0,i.kt)("strong",{parentName:"td"},"TipAdjustmentAuthorised")," (tip adjustment approved by the processor) ",(0,i.kt)("br",null),"- ",(0,i.kt)("strong",{parentName:"td"},"TipAdjustmentFailed")," (system error or timeout) ",(0,i.kt)("br",null)," - ",(0,i.kt)("strong",{parentName:"td"},"TipAdjustmentDeclined")," (tip adjustment declined by the processor)")))),(0,i.kt)("p",null,"If two tip adjustments are sent for the same sale transaction, the second tip adjustment will override the first one. In case the transaction fails (not declined) we recommend that you prompt the user of the POS to retry the adjustment."),(0,i.kt)("h2",{id:"10"},"Tokenize Card"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"tokenizeCard")),(0,i.kt)("p",null,"Initiates a card-tokenization operation to the card reader (not available for all acquirers, please check with Handpoint to know if tokenization is supported for your acquirer of choice)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"reference")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),"  ",(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"NSString")),(0,i.kt)("td",{parentName:"tr",align:null},"string for customer reference")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"//Initiates a card tokenization operation.\n[heftClient tokenizeCard];\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Events invoked")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#14"},(0,i.kt)("strong",{parentName:"a"},"responseStatus"))),(0,i.kt)("p",null,"Invoked while during transaction with different statuses from card reader"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#15"},(0,i.kt)("strong",{parentName:"a"},"responseError"))),(0,i.kt)("p",null,"Invoked to inform when an error response happens."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#17"},(0,i.kt)("strong",{parentName:"a"},"requestSignature"))),(0,i.kt)("p",null,"Invoked if card verification requires signature."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/doc/ios/iOS%20SDK%204.0.0/iosevents#44"},(0,i.kt)("strong",{parentName:"a"},"responseRecoveredTransactionStatus"))),(0,i.kt)("p",null,"Invoked when the card reader finishes processing the transaction"),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"YES")," if operation starts successfully.")))))}m.isMDXComponent=!0}}]);