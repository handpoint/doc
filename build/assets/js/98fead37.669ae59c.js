"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7623],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),h=i,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||r;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1977:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],s={sidebar_position:4,id:"windowsintegrationguide"},l="Integration Guide",c={unversionedId:"windowsintegrationguide",id:"version-Windows SDK 3.1.4/windowsintegrationguide",title:"Integration Guide",description:"Hilite & Hi5 - Bluetooth Integration",source:"@site/windows_versioned_docs/version-Windows SDK 3.1.4/windowsintegrationguide.md",sourceDirName:".",slug:"/windowsintegrationguide",permalink:"/doc/windows/Windows SDK 3.1.4/windowsintegrationguide",tags:[],version:"Windows SDK 3.1.4",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"windowsintegrationguide"},sidebar:"version-Windows SDK 3.1.4/tutorialSidebar",previous:{title:"API overview",permalink:"/doc/windows/Windows SDK 3.1.4/windowsapioverview"},next:{title:"Transactions",permalink:"/doc/windows/Windows SDK 3.1.4/windowstransactions"}},u=[{value:"Hilite &amp; Hi5 - Bluetooth Integration",id:"hilite--hi5---bluetooth-integration",children:[{value:"Introduction",id:"introduction",children:[],level:3},{value:"Let&#39;s start programming!",id:"lets-start-programming",children:[],level:3},{value:"Let&#39;s create a User Interface!",id:"lets-create-a-user-interface",children:[],level:3},{value:"Let&#39;s link our user interface with methods!",id:"lets-link-our-user-interface-with-methods",children:[],level:3},{value:"Let\xb4s notify the user when the app is connected and ready to send the transaction",id:"lets-notify-the-user-when-the-app-is-connected-and-ready-to-send-the-transaction",children:[],level:3},{value:"Let\xb4s display the receipts at the end of a transaction!",id:"lets-display-the-receipts-at-the-end-of-a-transaction",children:[],level:3},{value:"Final Result!",id:"final-result",children:[],level:3},{value:"Let&#39;s run our program!",id:"lets-run-our-program",children:[],level:3}],level:2},{value:"PAX &amp; Telpo - Cloud Integration",id:"pax--telpo---cloud-integration",children:[{value:"Introduction",id:"introduction-1",children:[],level:3},{value:"Let&#39;s start programming!",id:"lets-start-programming-1",children:[],level:3},{value:"Let&#39;s create a User Interface!",id:"lets-create-a-user-interface-1",children:[],level:3},{value:"Let&#39;s link our user interface with methods!",id:"lets-link-our-user-interface-with-methods-1",children:[],level:3},{value:"Let\xb4s notify the user when the app is connected and ready to send the transaction",id:"lets-notify-the-user-when-the-app-is-connected-and-ready-to-send-the-transaction-1",children:[],level:3},{value:"Let\xb4s display the receipts at the end of a transaction!",id:"lets-display-the-receipts-at-the-end-of-a-transaction-1",children:[],level:3},{value:"Final Result!",id:"final-result-1",children:[],level:3},{value:"Let&#39;s run our program!",id:"lets-run-our-program-1",children:[],level:3}],level:2},{value:"Terminal Simulator Integration",id:"terminal-simulator-integration",children:[{value:"Introduction",id:"introduction-2",children:[],level:3},{value:"Connecting to the simulator",id:"connecting-to-the-simulator",children:[],level:3},{value:"Controlling responses",id:"controlling-responses",children:[],level:3},{value:"Let&#39;s start programming!",id:"lets-start-programming-2",children:[],level:3},{value:"Let&#39;s create a User Interface!",id:"lets-create-a-user-interface-2",children:[],level:3},{value:"Let&#39;s link our user interface with methods!",id:"lets-link-our-user-interface-with-methods-2",children:[],level:3},{value:"Let\xb4s display the receipts at the end of a transaction!",id:"lets-display-the-receipts-at-the-end-of-a-transaction-2",children:[],level:3},{value:"Final Result!",id:"final-result-2",children:[],level:3},{value:"Let&#39;s run our program!",id:"lets-run-our-program-2",children:[],level:3}],level:2}],d={toc:u};function p(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"integration-guide"},"Integration Guide"),(0,r.kt)("h2",{id:"hilite--hi5---bluetooth-integration"},"Hilite & Hi5 - Bluetooth Integration"),(0,r.kt)("h3",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"This tutorial is guiding you through all the steps to create a basic payment application for Windows devices integrated with a Datecs terminal."),(0,r.kt)("p",null,"The new generation of Handpoint SDK's is designed to make your life easier. Simple and created for humans, it does not require any specific knowledge of the payment industry to be able to start accepting credit/debit card transactions."),(0,r.kt)("p",null,"At Handpoint we take care of securing every transaction so you don\xb4t have to worry about it while creating your application. We encrypt data from the payment terminal to the bank with our point-to-point encryption solution. Our platform is always up to the latest PCI-DSS security requirements."),(0,r.kt)("h3",{id:"lets-start-programming"},"Let's start programming!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Create a C# class"),"\nCreate a new C# class called MyClass and include com.handpoint.api as a dependency :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing com.handpoint.api;\n                    \nnamespace GettingStartedApp\n{\n    class MyClass\n    {\n    }\n}\n  \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Initialize the API")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing com.handpoint.api;\n                    \nnamespace GettingStartedApp\n{\n    class MyClass\n    {\n        Hapi api;\n\n        public MyClass()\n        {\n            InitApi();\n        }\n\n        public void InitApi()\n        {\n            string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n            api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret));\n            // The api is now initialized. Yay! we\'ve even set a default shared secret!\n            // The shared secret is a unique string shared between the card reader and your mobile application.\n            // It prevents other people to connect to your card reader.\n            // You should replace this default shared secret by the one sent by our support team.\n        }\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"3. Implement the mandatory Events(Events.Required) and per recommendation Status events (Events.Status)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing com.handpoint.api;\n                    \nnamespace GettingStartedApp\n{\n    class MyClass : Events.Required, Events.Status\n    {\n        Hapi api;\n        Device myDevice;\n\n        public MyClass()\n        {\n            InitApi();\n        }\n\n        public void InitApi()\n        {\n            string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n            api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret));\n        }\n\n        public void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n        {\n            // Here you get a list of Bluetooth payment terminals paired with your computer\n        }\n\n        public void EndOfTransaction(TransactionResult transactionResult, Device device)\n        {\n          // The TransactionResult object holds details about the transaction as well as the receipts.\n          // Useful information can be accessed through this object like the transaction ID, the amount, etc.\n        }\n\n        public void **[*ConnectionStatusChanged*](#7)**(ConnectionStatus status, Device device)\n        {\n            // The ConnectionStatus object holds details about the status regarding the connection to the target device.\n        }\n\n        public void CurrentTransactionStatus(StatusInfo info, Device device)\n        {\n            // The StatusInfo object holds details about the status and step taken during the transaction.\n        }\n\n        public void SignatureRequired(SignatureRequest signatureRequest, Device device)\n        {\n            // You\'ll be notified here if a sale process needs a signature verification\n            // A signature verification is needed if the cardholder uses an MSR or a chip & signature card\n            // This method will not be invoked if a transaction is made with a Chip & PIN card\n\n            api.SignatureResult(true); // This line means that the cardholder ALWAYS accepts to sign the receipt.\n            // A specific line will be displayed on the merchant receipt for the cardholder to be able to sign it\n        }\n\n        public void HardwareStatusChanged(HardwareStatus status, ConnectionMethod hardware)\n        {\n            // Ignore, legacy event, will be deleted in future version.\n        }\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"4. Add a method to discover surrounding devices and connect to the card reader"),"\nEnsure that the card reader and PC are correctly paired via bluetooth."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public void DiscoverDevices()\n{\n    api.ListDevices(ConnectionMethod.BLUETOOTH);\n    // This triggers the search for all the bluetooth devices around.\n    // You can also search for USB and Serial as a connection method\n}\n\npublic void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n{\n    foreach (Device device in devices)\n    {\n        if (device.Name != null)\n        {\n            if (device.Name.Equals("PP0513901435"))\n            // Put the name of your device, find it by doing C then up arrow on your card reader keypad\n            {\n                this.device = device;\n                //We\'ll remember the device for this session, it is nice if you would do that too\n                api.Connect(this.device);\n                //Connection to the device is handled automatically in the API\n            }\n        }\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"5. Add a method to connect directly to the card reader"),"\nInstead of discovering the surrounding devices you can also directly connect to the card reader by implementing the following method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public void DirectConnect()\n{\n    Device device = new Device("PP0513901435", "68:AA:D2:00:D5:27", "", ConnectionMethod.BLUETOOTH);\n    //new Device("name", "address", "port", ConnectionMethod);\n    //The address always has to be written in UPPER CASE\n    api.Connect(device);\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"6. Add a method to take payments")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool Pay()\n{\n    return api.Sale(new BigInteger(1000), Currency.GBP);\n    // Let\xb4s start our first payment of 10 pounds\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"7. Add a method to disconnect from the card reader")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Disconnect()\n{\n    api.Disconnect();\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"8. Eventually, MyClass.cs must look like this after implementing all the necessary methods :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing com.handpoint.api;\n\nnamespace GettingStartedApp\n{\n    class MyClass : Events.Required, Events.Status\n    {\n        Hapi api;\n        Device myDevice;\n\n        public MyClass(Form1 form1)\n        {\n            InitApi();\n        }\n\n        public void InitApi()\n        {\n            string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n            api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret));\n        }\n\n        public void DiscoverDevices()\n        {\n            api.SearchDevices(ConnectionMethod.BLUETOOTH);\n        }\n\n        public void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n        {\n            foreach (Device device in devices)\n            {\n                if (device.Name != null)\n                {\n                    if (device.Name.Equals("PP0513901435"))\n                    {\n                        this.device = device;\n                        api.Connect(this.device);\n                    }\n                }\n            }\n        }\n\n        public void DirectConnect()\n        {\n            Device device = new Device("PP0513901435", "68:AA:D2:00:D5:27", "", ConnectionMethod.BLUETOOTH);\n            api.Connect(device);\n        }\n\n        public bool Pay()\n        {\n            return api.Sale(new BigInteger(1000), Currency.GPB);\n        }\n\n        public void Disconnect()\n        {\n            api.Disconnect();\n        }\n\n        public void **[*ConnectionStatusChanged*](#7)**(ConnectionStatus status, Device device)\n        {\n            Console.WriteLine("*** ConnectionStatus *** " + status);\n        }\n\n        public void CurrentTransactionStatus(StatusInfo info, Device device)\n        {\n            Console.WriteLine("*** CurrentTransactionStatus *** " + info.Status.ToString());\n        }\n\n        public void SignatureRequired(SignatureRequest signatureRequest, Device device)\n        {\n                api.SignatureResult(true);\n        }\n        \n        public void EndOfTransaction(TransactionResult result, Device device)\n        {\n            Console.WriteLine("*** EndOfTransaction *** " + result.ToJSON());\n        }\n\n        public void HardwareStatusChanged(HardwareStatus status, ConnectionMethod hardware)\n        {\n            //Ignore\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"lets-create-a-user-interface"},"Let's create a User Interface!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Create buttons")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Go to your user interface (usually Form1.cs","[Design]",")"),(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox"),(0,r.kt)("li",{parentName:"ul"},"In the toolbox, under \u201cCommon Controls\u201d drag and drop 3 button items to the user interface"),(0,r.kt)("li",{parentName:"ul"},'Select "button1" > Right-Click > Properties'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button1" to "PayButton"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button1" to "Pay Now"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button2" to "ConnectButton"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button2" to "Connect To Card reader"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button3" to "DisconnectButton"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button3" to "Disconnect From Card Reader"'),(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox > Common Controls > Label"),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "label1" to "ConnectionLabel"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "label1" to "Disconnected"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "backColor" from "label1" to "Red"')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Create WebBrowsers")),(0,r.kt)("p",null,"Now that we have our 3 buttons, let\xb4s create two webBrowsers items to display the merchant receipt as well as the cardholder\xb4s receipt at the end of the transaction."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox > Common Controls > WebBrowser"),(0,r.kt)("li",{parentName:"ul"},"Drag and drop two web browsers to the user interface"),(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox > Common Controls > Label"),(0,r.kt)("li",{parentName:"ul"},"Drag and drop two labels to the user interface in order to identify the webBrowser items"),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from the left webBrowser to "MerchantReceiptBrowser"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from the right webBrowser to "CardholderReceiptBrowser"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "label2" to "MerchantReceiptLabel"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "label2" to "Merchant Receipt :"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "label3" to "CardholderReceiptLabel"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "label3" to "Cardholder Receipt :"')),(0,r.kt)("h3",{id:"lets-link-our-user-interface-with-methods"},"Let's link our user interface with methods!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Referencing the user interface(Form1.cs) in MyClass")),(0,r.kt)("p",null,"In MyClass.cs, create an instance of Form1 called UIClass and initialize it. Instantiate MyClass and add form1 as a parameter for the Class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"class MyClass : Events.Required, Events.Status\n{\n    Hapi api;\n    Device myDevice;\n    private Form1 uIClass;\n\n    public MyClass(Form1 form1)\n    {\n        uIClass = form1;\n        InitApi();\n    }\n    \n    [...]\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Referencing Myclass in Form1.cs and link methods to the user interface")),(0,r.kt)("p",null,"Go to Form1.cs","[Design]",' and double click on the button "Pay Now". By Double Clicking on it you created a method called PayButton_Click. Create a new instance of MyClass called "my" in Form1.cs then, inside the new method PayButton_Click call the Pay() method from MyClass.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace GettingStartedApp\n{\n    public partial class Form1 : Form\n    {\n        MyClass my;\n        public Form1()\n        {\n            InitializeComponent();\n            my = new MyClass(this);\n        }\n        private void PayButton_Click(object sender, EventArgs e)\n        {\n            my.Pay();\n        }\n    }\n}\n")),(0,r.kt)("p",null,"Go back to Form1.cs","[Design]"," and double click on each of the other buttons to automatically generate an OnClick method in Form1.cs. Link each of the buttons to the correct methods in MyClass.cs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace GettingStartedApp\n{\n    public partial class Form1 : Form\n    {\n        MyClass my;\n        public Form1()\n        {\n            InitializeComponent();\n            my = new MyClass(this);\n        }\n\n        private void PayButton_Click(object sender, EventArgs e)\n        {\n            my.Pay();\n        }\n\n        private void ConnectButton_Click(object sender, EventArgs e)\n        {\n            //my.DiscoverDevices();\n            my.DirectConnect();\n        }\n\n        private void DisconnectButton_Click(object sender, EventArgs e)\n        {\n            my.Disconnect();\n        }\n    }\n}\n")),(0,r.kt)("h3",{id:"lets-notify-the-user-when-the-app-is-connected-and-ready-to-send-the-transaction"},"Let\xb4s notify the user when the app is connected and ready to send the transaction"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Update the ConnectionLabel to notify the user of the connection status"),"\nGet the connection status from the method ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#7"},(0,r.kt)("em",{parentName:"a"},"ConnectionStatusChanged")))," in MyClass.cs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public void **[*ConnectionStatusChanged*](#7)**(ConnectionStatus status, Device device)\n{\n    Console.WriteLine("*** ConnectionStatus *** " + status);\n    if (status == ConnectionStatus.Connected)\n    {\n        uIClass.UpdateLabel(true);\n    }\n    else\n    {\n        uIClass.UpdateLabel(false);\n    }\n}\n\npublic void CurrentTransactionStatus(StatusInfo info, Device device)\n{\n    //Let also console log the status during the transaction\n    Console.WriteLine("*** CurrentTransactionStatus *** " + info.Status.ToString());\n}\n            \nCreate the UpdateLabel method in Form1.cs\n\npublic delegate void UpdateConnectionLabel(bool Connected);\npublic void UpdateLabel(bool Connected)\n{\n    //Only need to check for one of the webbrowsers\n    if (ConnectionLabel.InvokeRequired)\n    {\n        UpdateConnectionLabel d = new UpdateConnectionLabel(UpdateLabel);\n        this.Invoke(d, new object[] { Connected });\n    }\n    else\n    {\n        if (Connected)\n        {\n            ConnectionLabel.Text = "Connected";\n            ConnectionLabel.BackColor = Color.Green;\n        }\n        else {\n            ConnectionLabel.Text = "Disconnected";\n            ConnectionLabel.BackColor = Color.Red;\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"lets-display-the-receipts-at-the-end-of-a-transaction"},"Let\xb4s display the receipts at the end of a transaction!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Fetch the cardholder's and merchant receipts from the method EndOfTransaction in MyClass"),"\nAt this point all the buttons are connected but we are still missing to display the receipts in the webBrowsers. First, let\xb4s get the receipts from the method EndOfTransaction in myClass.cs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public void EndOfTransaction(TransactionResult transactionResult, Device device)\n{\n    Console.WriteLine("*** EndOfTransaction *** " + result.ToJSON());\n    uIClass.DisplayReceipts(result.MerchantReceipt, result.CustomerReceipt);\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Create the DisplayReceipts method in form1.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public delegate void UpdateReceiptsCallback(string MerchantReceipt, string CustomerReceipt);\npublic void DisplayReceipts(string MerchantReceipt, string CustomerReceipt)\n{\n    //Only need to check for one of the webbrowsers\n    if (MerchantReceiptBrowser.InvokeRequired)\n    {\n        UpdateReceiptsCallback d = new UpdateReceiptsCallback(DisplayReceipts);\n        this.Invoke(d, new object[] { MerchantReceipt, CustomerReceipt });\n    }\n    else\n    {\n        MerchantReceiptBrowser.DocumentText = MerchantReceipt;\n        CardholderReceiptBrowser.DocumentText = CustomerReceipt;\n    }\n}\n")),(0,r.kt)("h3",{id:"final-result"},"Final Result!"),(0,r.kt)("p",null,"Here is how MyClass.cs and Form1.cs must eventually look like :"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. MyClass.cs :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing com.handpoint.api;\n\nnamespace GettingStartedApp\n{\n    class MyClass : Events.Required, Events.Status\n    {\n        Hapi api;\n        Device myDevice;\n        private Form1 uIClass;\n\n        public MyClass(Form1 form1)\n        {\n            uIClass = form1;\n            InitApi();\n        }\n\n        public void InitApi()\n        {\n            string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n            api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret));\n        }\n\n        public void DiscoverDevices()\n        {\n            api.SearchDevices(ConnectionMethod.BLUETOOTH);\n        }\n\n        public void DirectConnect()\n        {\n            Device device = new Device("PP0513901435", "68:AA:D2:00:D5:27", "", ConnectionMethod.BLUETOOTH);\n             api.Connect(device);\n        }\n\n        public bool Pay()\n        {\n            return api.Sale(new BigInteger(1000), Currency.GBP);\n        }\n\n        public void Disconnect()\n        {\n            api.Disconnect();\n        }\n\n        public void **[*ConnectionStatusChanged*](#7)**(ConnectionStatus status, Device device)\n        {\n            Console.WriteLine("*** ConnectionStatus *** " + status);\n            if (status == ConnectionStatus.Connected)\n            {\n                uIClass.UpdateLabel(true);\n            }\n            else\n            {\n                uIClass.UpdateLabel(false);\n            }\n        }\n\n        public void CurrentTransactionStatus(StatusInfo info, Device device)\n        {\n            //Let\'s log also the status during the transaction\n            Console.WriteLine("*** CurrentTransactionStatus *** " + info.Status.ToString());\n        }\n\n        public void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n        {\n            foreach (Device device in devices)\n            {\n                if (device.Name != null)\n                {\n                    if (device.Name.Equals("PP0513901435"))\n                    {\n                        this.device = device;\n                        api.Connect(this.device);\n                    }\n                }\n            }\n        }\n\n        public void EndOfTransaction(TransactionResult result, Device device)\n        {\n            Console.WriteLine("*** EndOfTransaction *** " + result.ToJSON());\n            uIClass.DisplayReceipts(result.MerchantReceipt, result.CustomerReceipt);\n        }\n\n        public void SignatureRequired(SignatureRequest signatureRequest, Device device)\n        {\n            api.SignatureResult(true); // This line means that the cardholder ALWAYS accepts to sign the receipt.\n        }\n\n        public void HardwareStatusChanged(HardwareStatus status, ConnectionMethod hardware)\n        {\n            //Ignore\n        }\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Form1.cs :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace GettingStartedApp\n{\n    public partial class Form1 : Form\n    {\n        MyClass my;\n        public Form1()\n        {\n            InitializeComponent();\n            my = new MyClass(this);\n        }\n\n        private void PayButton_Click(object sender, EventArgs e)\n        {\n            my.Pay();\n        }\n\n        private void ConnectButton_Click(object sender, EventArgs e)\n        {\n            my.DirectConnect();\n        }\n\n        private void DisconnectButton_Click(object sender, EventArgs e)\n        {\n            my.Disconnect();\n        }\n\n        public delegate void UpdateReceiptsCallback(string MerchantReceipt, string CustomerReceipt);\n        public void DisplayReceipts(string MerchantReceipt, string CustomerReceipt)\n        {\n            //Only need to check for one of the webbrowsers\n            if (MerchantReceiptBrowser.InvokeRequired)\n            {\n                UpdateReceiptsCallback d = new UpdateReceiptsCallback(DisplayReceipts);\n                this.Invoke(d, new object[] { MerchantReceipt, CustomerReceipt });\n            }\n            else\n            {\n                MerchantReceiptBrowser.DocumentText = MerchantReceipt;\n                CardholderReceiptBrowser.DocumentText = CustomerReceipt;\n            }\n        }\n\n        public delegate void UpdateConnectionLabel(bool connected);\n\n        public void UpdateLabel(bool Connected)\n        {\n            //Only need to check for one of the webbrowsers\n            if (ConnectionLabel.InvokeRequired)\n            {\n                UpdateConnectionLabel d = new UpdateConnectionLabel(UpdateLabel);\n                this.Invoke(d, new object[] { Connected });\n            }\n            else\n            {\n                if (Connected)\n                {\n                    ConnectionLabel.Text = "Connected";\n                    ConnectionLabel.BackColor = Color.Green;\n                }\n                else {\n                    ConnectionLabel.Text = "Disconnected";\n                    ConnectionLabel.BackColor = Color.Red;\n                }\n            }\n        }\n\n    }\n}\n')),(0,r.kt)("h3",{id:"lets-run-our-program"},"Let's run our program!"),(0,r.kt)("p",null,'Run the program by clicking the "play" button :'),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'Click on "Connect To Card Reader", this can take a little bit of time (10 sec max) due to the fact that we are looking for all the devices around before connecting to a specific one'),(0,r.kt)("li",{parentName:"ol"},'Click "Pay Now"'),(0,r.kt)("li",{parentName:"ol"},"Follow the instructions on the card reader"),(0,r.kt)("li",{parentName:"ol"},"When the transaction is finished, the receipts should be displayed in the webBrowsers"),(0,r.kt)("li",{parentName:"ol"},'Click on "Disconnect From Card Reader" to stop the connection with the card reader')),(0,r.kt)("h2",{id:"pax--telpo---cloud-integration"},"PAX & Telpo - Cloud Integration"),(0,r.kt)("h3",{id:"introduction-1"},"Introduction"),(0,r.kt)("h3",{id:"lets-start-programming-1"},"Let's start programming!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Create a C# class")),(0,r.kt)("p",null,"Create a new C# class called MyClass and include com.handpoint.api as a dependency :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing com.handpoint.api;\n                    \nnamespace GettingStartedApp\n{\n    class MyClass\n    {\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Initialize the API")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing com.handpoint.api;\n                    \nnamespace GettingStartedApp\n{\n    class MyClass\n    {\n        Hapi api;\n\n        public MyClass()\n        {\n            InitApi();\n        }\n\n        public void InitApi()\n        {\n            string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n            string apikey = "This-is-my-api-key-provided-by-Handpoint";\n            api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret, apikey));\n            // The api is now initialized. Yay! we\'ve even set default credentials.\n            // The shared secret is a unique string shared between the payment terminal and your application, it is a free field.\n            // The Api key is a unique key per merchant used to authenticate the terminal against the Cloud.\n            // You should replace the API key with the one sent by the Handpoint support team.\n        }\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"3. Implement the mandatory Events(Events.Required) and per recommendation Status events (Events.Status)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing com.handpoint.api;\n                    \nnamespace GettingStartedApp\n{\n    class MyClass : Events.Required, Events.Status\n    {\n        Hapi api;\n        Device myDevice;\n\n        public MyClass()\n        {\n            InitApi();\n        }\n\n        public void InitApi()\n        {\n            string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n            string apikey = "This-is-my-api-key-provided-by-Handpoint"\n            api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret, apikey));\n        }\n\n        public void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n        {\n          // here you get a list of payment terminals associated with the api key.\n        }\n\n        public void EndOfTransaction(TransactionResult transactionResult, Device device)\n        {\n          // The TransactionResult object holds details about the transaction as well as the receipts.\n          // Useful information can be accessed through this object like the transaction ID, the amount, etc.\n        }\n\n        public void **[*ConnectionStatusChanged*](#7)**(ConnectionStatus status, Device device)\n        {\n            // The ConnectionStatus object holds details about the status regarding the connection to the target device.\n        }\n\n        public void CurrentTransactionStatus(StatusInfo info, Device device)\n        {\n            // The StatusInfo object holds details about the status and step taken during the transaction.\n        }\n\n        public void SignatureRequired(SignatureRequest request, Device device)\n        {\n            // Ignore for a PAX/Telpo integration. The complete signature capture process\n            // is already handled in the sdk, a dialog will prompt the user for a signature if required.\n            // If a signature was entered, it should be printed on the receipts.\n        }\n\n        public void HardwareStatusChanged(HardwareStatus status, ConnectionMethod hardware)\n        {\n            // Ignore, legacy event, will be deleted in future version.\n        }\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"4. Add a method to list the terminals of your merchant and connect to one of them"),"\nEnsure that the card reader and PC are correctly paired via Cloud connection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public void DiscoverDevices()\n{\n    // This triggers the search for all the cloud devices related to your Api Key.\n    api.SearchDevices(ConnectionMethod.CLOUD);\n}\n\npublic void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n{\n    foreach (Device device in devices)\n    {\n        if (device.Name != null)\n        {\n            if (device.Name.Equals("9822032398-PAXA920"))\n            // Put the name of your device, it is the composition of: serial number - device model.\n            // Example for a PAX A920 device: serial_number - model -> 9822032398-PAXA920\n            {\n                this.myDevice = device;\n              //We\'ll remember the device for this session, it is nice if you would do that too\n              api.Connect(this.myDevice);\n              //Connection to the device is handled automatically by the api\n            }\n        }\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"5. Add a method to connect directly to the payment terminal"),"\nInstead of discovering terminals you can also connect directly to one of them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public void DirectConnect()\n{\n    Device device = new Device("CloudDevice", "9822032398-PAXA920", "", ConnectionMethod.CLOUD);\n    // new Device("name", "address", "port (optional)", ConnectionMethod);\n    // The address always has to be written in UPPER CASE\n    // It is the composition of the serial number and model ot the payment terminal.\n    // Example for a PAX A920 device: serial_number - model  -> 9822032398-PAXA920\n    api.Connect(device);\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"6. Add a method to take payments")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool Pay()\n{\n    return api.Sale(new BigInteger(1000), Currency.EUR);\n    // Let\xb4s start our first transaction for 10 euros\n    // The amount should always be in the minor unit of the currency\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"7. Add a method to disconnect from the card reader")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Disconnect()\n{\n    api.Disconnect();\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"8. Eventually, MyClass.cs must look like this after implementing all the necessary methods :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing com.handpoint.api;\n\nnamespace GettingStartedApp\n{\n    class MyClass : Events.Required, Events.Status\n    {\n        Hapi api;\n        Device myDevice;\n\n        public MyClass(Form1 form1)\n        {\n            InitApi();\n        }\n\n        public void InitApi()\n        {\n            string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n            string apikey = "This-is-my-api-key-provided-by-Handpoint"\n            api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret, apikey));\n        }\n\n        public void DiscoverDevices()\n        {\n            api.SearchDevices(ConnectionMethod.CLOUD);\n        }\n\n        public void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n        {\n            foreach (Device device in devices)\n            {\n                if (device.Name != null)\n                {\n                    if (device.Name.Equals("9822032398-PAXA920"))\n                    {\n                        this.myDevice = device;\n                        api.Connect(this.myDevice);\n                    }\n                }\n            }\n        }\n\n        public void DirectConnect()\n        {\n            Device device = new Device("CloudDevice", "9822032398-PAXA920", "", ConnectionMethod.CLOUD);\n            api.Connect(device);\n        }\n\n        public bool Pay()\n        {\n            return api.Sale(new BigInteger(1000), Currency.EUR);\n        }\n\n        public void Disconnect()\n        {\n            api.Disconnect();\n        }\n\n        public void **[*ConnectionStatusChanged*](#7)**(ConnectionStatus status, Device device)\n        {\n            Console.WriteLine("*** ConnectionStatus *** " + status);\n        }\n\n        public void CurrentTransactionStatus(StatusInfo info, Device device)\n        {\n            Console.WriteLine("*** CurrentTransactionStatus *** " + info.Status.ToString());\n        }\n\n        public void EndOfTransaction(TransactionResult result, Device device)\n        {\n            Console.WriteLine("*** EndOfTransaction *** " + result.ToJSON());\n        }\n\n        public void HardwareStatusChanged(HardwareStatus status, ConnectionMethod hardware)\n        {\n            //Ignore\n        }\n\n        public void SignatureRequired(SignatureRequest request, Device device)\n        {\n            //Ignore\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"lets-create-a-user-interface-1"},"Let's create a User Interface!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Create buttons and labels")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Go to your user interface (usually Form1.cs","[Design]",")"),(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox"),(0,r.kt)("li",{parentName:"ul"},"In the toolbox, under \u201cCommon Controls\u201d drag and drop 3 button items to the user interface"),(0,r.kt)("li",{parentName:"ul"},'Select "button1" > Right-Click > Properties'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button1" to "PayButton"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button1" to "Pay Now"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button2" to "ConnectButton"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button2" to "Connect To Card reader"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button3" to "DisconnectButton"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button3" to "Disconnect From Card Reader"'),(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox > Common Controls > Label"),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "label1" to "ConnectionLabel"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "label1" to "Disconnected"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "backColor" from "label1" to "Red"')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Create WebBrowsers"),"\nNow that we have our 3 buttons, let\xb4s create two webBrowsers items to display the merchant receipt as well as the cardholder\xb4s receipt at the end of the transaction."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox > Common Controls > WebBrowser"),(0,r.kt)("li",{parentName:"ul"},"Drag and drop two web browsers to the user interface"),(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox > Common Controls > Label"),(0,r.kt)("li",{parentName:"ul"},"Drag and drop two labels to the user interface in order to identify the webBrowser items"),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from the left webBrowser to "MerchantReceiptBrowser"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from the right webBrowser to "CardholderReceiptBrowser"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "label2" to "MerchantReceiptLabel"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "label2" to "Merchant Receipt :"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "label3" to "CardholderReceiptLabel"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "label3" to "Cardholder Receipt :"')),(0,r.kt)("h3",{id:"lets-link-our-user-interface-with-methods-1"},"Let's link our user interface with methods!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Referencing the user interface(Form1.cs) in MyClass")),(0,r.kt)("p",null,"In MyClass.cs, create an instance of Form1 called UIClass and initialize it. Instantiate MyClass and add form1 as a parameter for the Class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"class MyClass : Events.Required, Events.Status\n{\n    Hapi api;\n    Device myDevice;\n    private Form1 uIClass;\n\n    public MyClass(Form1 form1)\n    {\n        uIClass = form1;\n        InitApi();\n    }\n    \n    [...]\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Referencing Myclass in Form1.cs and link methods to the user interface"),"\nGo to Form1.cs","[Design]",' and double click on the button "Pay Now". By Double Clicking on it you created a method called PayButton_Click. Create a new instance of MyClass called "my" in Form1.cs then, inside the new method PayButton_Click call the Pay() method from MyClass.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace GettingStartedApp\n{\n    public partial class Form1 : Form\n    {\n        MyClass my;\n        public Form1()\n        {\n            InitializeComponent();\n            my = new MyClass(this);\n        }\n        private void PayButton_Click(object sender, EventArgs e)\n        {\n            my.Pay();\n        }\n    }\n}\n")),(0,r.kt)("p",null,"Go back to Form1.cs","[Design]"," and double click on each of the other buttons to automatically generate an OnClick method in Form1.cs. Link each of the buttons to the correct methods in MyClass.cs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nnamespace GettingStartedApp\n{\n    public partial class Form1 : Form\n    {\n        MyClass my;\n        public Form1()\n        {\n            InitializeComponent();\n            my = new MyClass(this);\n        }\n\n        private void PayButton_Click(object sender, EventArgs e)\n        {\n            my.Pay();\n        }\n\n        private void ConnectButton_Click(object sender, EventArgs e)\n        {\n            //my.DiscoverDevices();\n            my.DirectConnect();\n        }\n\n        private void DisconnectButton_Click(object sender, EventArgs e)\n        {\n            my.Disconnect();\n        }\n    }\n}\n")),(0,r.kt)("h3",{id:"lets-notify-the-user-when-the-app-is-connected-and-ready-to-send-the-transaction-1"},"Let\xb4s notify the user when the app is connected and ready to send the transaction"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Update the ConnectionLabel to notify the user of the connection status"),"\nGet the connection status from the method ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#7"},(0,r.kt)("em",{parentName:"a"},"ConnectionStatusChanged")))," in MyClass.cs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public void **[*ConnectionStatusChanged*](#7)**(ConnectionStatus status, Device device)\n{\n    Console.WriteLine("*** ConnectionStatus *** " + status);\n    if (status == ConnectionStatus.Connected)\n    {\n        uIClass.UpdateLabel(true);\n    }\n    else\n    {\n        uIClass.UpdateLabel(false);\n    }\n}\n\npublic void CurrentTransactionStatus(StatusInfo info, Device device)\n{\n    //Let also console log the status during the transaction\n    Console.WriteLine("*** CurrentTransactionStatus *** " + info.Status.ToString());\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Create the UpdateLabel method in Form1.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public delegate void UpdateConnectionLabel(bool Connected);\npublic void UpdateLabel(bool Connected)\n{\n    //Only need to check for one of the webbrowsers\n    if (ConnectionLabel.InvokeRequired)\n    {\n        UpdateConnectionLabel d = new UpdateConnectionLabel(UpdateLabel);\n        this.Invoke(d, new object[] { Connected });\n    }\n    else\n    {\n        if (Connected)\n        {\n            ConnectionLabel.Text = "Connected";\n            ConnectionLabel.BackColor = Color.Green;\n        }\n        else {\n            ConnectionLabel.Text = "Disconnected";\n            ConnectionLabel.BackColor = Color.Red;\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"lets-display-the-receipts-at-the-end-of-a-transaction-1"},"Let\xb4s display the receipts at the end of a transaction!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Fetch the cardholder's and merchant receipts from the method EndOfTransaction in MyClass"),"\nAt this point all the buttons are connected but we are still missing to display the receipts in the webBrowsers. First, let\xb4s get the receipts from the method EndOfTransaction in myClass.cs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public void EndOfTransaction(TransactionResult transactionResult, Device device)\n{\n    Console.WriteLine("*** EndOfTransaction *** " + result.ToJSON());\n    uIClass.DisplayReceipts(result.MerchantReceipt, result.CustomerReceipt);\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Create the DisplayReceipts method in Form1.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public delegate void UpdateReceiptsCallback(string MerchantReceipt, string CustomerReceipt);\npublic void DisplayReceipts(string MerchantReceipt, string CustomerReceipt)\n{\n    //Only need to check for one of the webbrowsers\n    if (MerchantReceiptBrowser.InvokeRequired)\n    {\n        UpdateReceiptsCallback d = new UpdateReceiptsCallback(DisplayReceipts);\n        this.Invoke(d, new object[] { MerchantReceipt, CustomerReceipt });\n    }\n    else\n    {\n        MerchantReceiptBrowser.DocumentText = MerchantReceipt;\n        CardholderReceiptBrowser.DocumentText = CustomerReceipt;\n    }\n}\n")),(0,r.kt)("h3",{id:"final-result-1"},"Final Result!"),(0,r.kt)("p",null,"Here is how MyClass.cs and Form1.cs must eventually look like:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. MyClass.cs :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing com.handpoint.api;\n\nnamespace GettingStartedApp\n{\n    class MyClass : Events.Required, Events.Status\n    {\n        Hapi api;\n        Device myDevice;\n        private Form1 uIClass;\n\n        public MyClass(Form1 form1)\n        {\n            uIClass = form1;\n            InitApi();\n        }\n\n        public void InitApi()\n        {\n            string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n            string apikey = "This-is-my-api-key-provided-by-Handpoint"\n            api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret, apikey));\n        }\n\n        public void DiscoverDevices()\n        {\n            api.SearchDevices(ConnectionMethod.CLOUD);\n        }\n\n        public void DirectConnect()\n        {\n            Device device = new Device("CloudDevice", "0821032398-PAXA920", "", ConnectionMethod.CLOUD);\n            api.Connect(device);\n        }\n\n        public bool Pay()\n        {\n            return api.Sale(new BigInteger(1000), Currency.EUR);\n        }\n\n        public void Disconnect()\n        {\n            api.Disconnect();\n        }\n\n        public void **[*ConnectionStatusChanged*](#7)**(ConnectionStatus status, Device device)\n        {\n            Console.WriteLine("***ConnectionStatus*** " + status);\n            if (status == ConnectionStatus.Connected)\n            {\n                uIClass.UpdateLabel(true);\n            }\n            else\n            {\n                uIClass.UpdateLabel(false);\n            }\n        }\n\n        public void CurrentTransactionStatus(StatusInfo info, Device device)\n        {\n            //Let\'s log also the status during the transaction\n            Console.WriteLine("*** CurrentTransactionStatus *** " + info.Status.ToString());\n        }\n\n        public void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n        {\n            foreach (Device device in devices)\n            {\n                if (device.Name != null)\n                {\n                    if (device.Name.Equals("0821032398-PAXA920"))\n                    {\n                        this.myDevice = device;\n                        api.Connect(this.myDevice);\n                    }\n                }\n            }\n        }\n\n        public void EndOfTransaction(TransactionResult result, Device device)\n        {\n            Console.WriteLine("*** EndOfTransaction *** " + result.ToJSON());\n            uIClass.DisplayReceipts(result.MerchantReceipt, result.CustomerReceipt);\n        }\n\n        public void HardwareStatusChanged(HardwareStatus status, ConnectionMethod hardware)\n        {\n            //Ignore\n        }\n\n        public void SignatureRequired(SignatureRequest request, Device device)\n        {\n            //Ignore\n        }\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Form1.cs :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'    using System;\n    using System.Drawing;\n    using System.Windows.Forms;\n    \n    namespace GettingStartedApp\n    {\n        public partial class Form1 : Form\n        {\n            MyClass my;\n            public Form1()\n            {\n                InitializeComponent();\n                my = new MyClass(this);\n            }\n    \n            private void PayButton_Click(object sender, EventArgs e)\n            {\n                my.Pay();\n            }\n    \n            private void ConnectButton_Click(object sender, EventArgs e)\n            {\n                my.DirectConnect();\n            }\n    \n            private void DisconnectButton_Click(object sender, EventArgs e)\n            {\n                my.Disconnect();\n            }\n    \n            public delegate void UpdateReceiptsCallback(string MerchantReceipt, string CustomerReceipt);\n            public void DisplayReceipts(string MerchantReceipt, string CustomerReceipt)\n            {\n                //Only need to check for one of the webbrowsers\n                if (MerchantReceiptBrowser.InvokeRequired)\n                {\n                    UpdateReceiptsCallback d = new UpdateReceiptsCallback(DisplayReceipts);\n                    this.Invoke(d, new object[] { MerchantReceipt, CustomerReceipt });\n                }\n                else\n                {\n                    MerchantReceiptBrowser.DocumentText = MerchantReceipt;\n                    CardholderReceiptBrowser.DocumentText = CustomerReceipt;\n                }\n            }\n    \n            public delegate void UpdateConnectionLabel(bool connected);\n    \n            public void UpdateLabel(bool Connected)\n            {\n                //Only need to check for one of the webbrowsers\n                if (ConnectionLabel.InvokeRequired)\n                {\n                    UpdateConnectionLabel d = new UpdateConnectionLabel(UpdateLabel);\n                    this.Invoke(d, new object[] { Connected });\n                }\n                else\n                {\n                    if (Connected)\n                    {\n                        ConnectionLabel.Text = "Connected";\n                        ConnectionLabel.BackColor = Color.Green;\n                    }\n                    else {\n                        ConnectionLabel.Text = "Disconnected";\n                        ConnectionLabel.BackColor = Color.Red;\n                    }\n                }\n            }\n    \n        }\n    }\n')),(0,r.kt)("h3",{id:"lets-run-our-program-1"},"Let's run our program!"),(0,r.kt)("p",null,'Run the program by clicking the "play" button :'),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'Click on "Connect To Card Reader", this can take a little bit of time (10 sec max) due to the fact that we are looking for all the devices around before connecting to a specific one'),(0,r.kt)("li",{parentName:"ol"},'Click "Pay Now"'),(0,r.kt)("li",{parentName:"ol"},"Follow the instructions on the card reader"),(0,r.kt)("li",{parentName:"ol"},"When the transaction is finished, the receipts should be displayed in the webBrowsers"),(0,r.kt)("li",{parentName:"ol"},'Click on "Disconnect From Card Reader" to stop the connection with the card reader')),(0,r.kt)("h2",{id:"terminal-simulator-integration"},"Terminal Simulator Integration"),(0,r.kt)("h3",{id:"introduction-2"},"Introduction"),(0,r.kt)("p",null,"This tutorial is guiding you through all the steps to create a basic payment application for Windows using a card reader simulator. The simulator only has limited capabilities and we highly recommend that you order a development kit if you want to carry a full integration. The development kit contains a card reader as well as a test card and will allow you to test your integration from end to end."),(0,r.kt)("p",null,"The new generation of Handpoint SDK's is designed to make your life easier. Simple and created for humans, it does not require any specific knowledge of the payment industry to be able to start accepting credit/debit card transactions."),(0,r.kt)("p",null,"At Handpoint we take care of securing every transaction so you don\xb4t have to worry about it while creating your application. We encrypt data from the payment terminal to the bank with our point-to-point encryption solution. Our platform is always up to the latest PCI-DSS security requirements."),(0,r.kt)("h3",{id:"connecting-to-the-simulator"},"Connecting to the simulator"),(0,r.kt)("p",null,"The SDK offers a method in which you will need to specify the card reader to be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'hapi.useDevice(new Device("Name", "Port", "Address", ConnectionMethod.****))\n')),(0,r.kt)("p",null,"Simply set the ConnectionMethod to Simulator, i.e. ConnectionMethod.Simulator. The SDK does the rest. You don't need to search via bluetooth for surrounding card readers when using the simulator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'hapi.useDevice(new Device("Name", "Port", "Address", ConnectionMethod.Simulator))\n')),(0,r.kt)("h3",{id:"controlling-responses"},"Controlling responses"),(0,r.kt)("p",null,"The simulator mimics the card reader as much as possible regarding information flow from the SDK interface to your application. It will return all the transaction statuses, transaction results and receipts."),(0,r.kt)("p",null,"Results of a transaction are controlled by the amount sent into the sale function:",(0,r.kt)("br",null),"\nThe 3rd position from the right sets the desired financial status, 0 = Authorized and 1 = Declined.",(0,r.kt)("br",null),"\nThe 4th position from the right sets the desired verification method, 0 = Signature and 1 = PIN."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"hapi.Sale(X10XX, Currency.GBP); // amount = X 10 XX - where X represents an integer [0;9]\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"X 00 XX = Signature authorized"),(0,r.kt)("li",{parentName:"ul"},"X 01 XX = Signature declined"),(0,r.kt)("li",{parentName:"ul"},"X 10 XX = Pin authorized"),(0,r.kt)("li",{parentName:"ul"},"X 11 XX = Pin declined")),(0,r.kt)("h3",{id:"lets-start-programming-2"},"Let's start programming!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Create a C# class"),"\nCreate a new C# class called MyClass and include com.handpoint.api as a dependency :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using com.handpoint.api;\n\n    namespace GettingStartedWithSimulator\n    {\n        class MyClass\n        {\n        }\n    }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Initialize the API")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using com.handpoint.api;\n\n    namespace GettingStartedWithSimulator\n    {\n        class MyClass\n        {\n            Hapi api;\n\n            public MyClass()\n            {\n                InitApi();\n            }\n            public void InitApi()\n            {\n                string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n                api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret));\n                // The api is now initialized. Yay! we\'ve even set a default shared secret!\n                // The shared secret is a unique string shared between the card reader and your mobile application.\n                // It prevents other people to connect to your card reader.\n            }\n        }\n    }\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"3. Implement the mandatory Events(Events.Required)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using com.handpoint.api;\n\n    namespace GettingStartedWithSimulator\n    {\n        class MyClass : Events.Required\n        {\n            Hapi api;\n\n            public MyClass()\n            {\n                InitApi();\n            }\n\n            public void InitApi()\n            {\n                string sharedSecret = \"0102030405060708091011121314151617181920212223242526272829303132\";\n                api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret));\n                // The api is now initialized. Yay! we've even set a default shared secret!\n                // The shared secret is a unique string shared between the card reader and your mobile application\n                // It prevents other people to connect to your card reader\n            }\n\n            public void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n            {\n                // Only needed when using a payment terminal\n                //here you get a list of Bluetooth payment terminals paired with your PC\n                // You can also get a list of serial / USB payment terminals attached to your computer\n\n            }\n\n            public void SignatureRequired(SignatureRequest signatureRequest, Device device)\n            {\n                // You'll be notified here if a sale process needs a signature verification\n                // A signature verification is needed if the cardholder uses an MSR or a chip & signature card\n                // This method will not be invoked if a transaction is made with a Chip & PIN card\n\n                api.SignatureResult(true); // This line means that the cardholder ALWAYS accepts to sign the receipt\n                // A specific line will be displayed on the merchant receipt for the cardholder to be able to sign it\n            }\n\n            public void EndOfTransaction(TransactionResult transactionResult, Device device)\n            {\n                // The object TransactionResult holds the different receipts\n                // Other information can be accessed through this object like the transaction ID, the amount...\n            }\n        }\n    }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"4. Add a method to connect to the simulator")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'    public void Connect()\n    {\n        Device device = new Device("Name", "Address", "Port", ConnectionMethod.SIMULATOR);\n        api.UseDevice(device);\n    }\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"5. Add a method to take payments with the simulator")),(0,r.kt)("p",null,"The simulator mimics the card reader as much as possible regarding the information flow from the SDK interface to your application. The results of the transaction (declined, authorized) and the type of verification method (PIN, signature) will depend on the amount used."),(0,r.kt)("p",null,"You can get different responses from the simulator by setting different values for the amount parameter, e.g. for a Sale function :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    api.Sale(X10XX, Currency.GBP); // amount = X 10 XX - where X represents an integer [0;9]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Amount Values")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"X00XX = Signature authorized"),(0,r.kt)("li",{parentName:"ul"},"X01XX = Signature declined"),(0,r.kt)("li",{parentName:"ul"},"X10XX = PIN authorized"),(0,r.kt)("li",{parentName:"ul"},"X11XX = PIN declined")),(0,r.kt)("p",null,"The 3rd number from right sets desired financial status, Authorized or Declined. Default status is Authorized.",(0,r.kt)("br",null),"\nThe 4th number from right sets desired verification method, Signature or PIN. Default method is Signature."),(0,r.kt)("p",null,"Let\xb4s add 4 methods to MyClass in order to represent the 4 cases above :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using com.handpoint.api;\n\n    namespace GettingStartedWithSimulator\n    {\n        class MyClass : Events.Required\n        {\n            Hapi api;\n\n            public MyClass()\n            {\n                InitApi();\n            }\n\n            public void InitApi()\n            {\n                string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n                api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret));\n                // The api is now initialized. Yay! we\'ve even set a default shared secret!\n                // The shared secret is a unique string shared between the card reader and your mobile application.\n                // It prevents other people to connect to your card reader.\n            }\n\n            public void **[*deviceDiscoveryFinished*](#13)**(List <Device> devices)\n            {\n                 // Only needed when using a payment terminal\n                 //Here you get a list of Bluetooth payment terminals paired with your PC\n                 // You can also get a list of serial / USB payment terminals attached to your computer\n\n            }\n\n            public void Connect()\n            {\n                Device device = new Device("Name", "Address", "Port", ConnectionMethod.SIMULATOR);\n                api.UseDevice(device);\n            }\n\n            public bool PayWithSignatureAuthorized()\n            {\n                return api.Sale(new BigInteger("10000"), Currency.GBP);\n                // amount X00XX where X represents an integer [0;9] --\x3e Signature authorized\n            }\n\n            public bool PayWithSignatureDeclined()\n            {\n                return api.Sale(new BigInteger("10100"), Currency.GBP);\n                // amount X01XX where X represents an integer [0;9] --\x3e Signature declined\n            }\n\n            public bool PayWithPinAuthorized()\n            {\n                return api.Sale(new BigInteger("11000"), Currency.GBP);\n                // amount X10XX where X represents an integer [0;9] --\x3e PIN authorized\n            }\n            public bool PayWithPinDeclined()\n            {\n                return api.Sale(new BigInteger("11100"), Currency.GBP);\n                // amount X11XX where X represents an integer [0;9] --\x3e PIN declined\n            }\n\n            public void SignatureRequired(SignatureRequest signatureRequest, Device device)\n            {\n                // You\'ll be notified here if a sale process needs a signature verification\n                // A signature verification is needed if the cardholder uses an MSR or a chip & signature card\n                // This method will not be invoked if a transaction is made with a Chip & PIN card\n\n                api.SignatureResult(true); // This line means that the cardholder ALWAYS accepts to sign the receipt.\n                // A specific line will be displayed on the merchant receipt for the cardholder to be able to sign it\n            }\n\n            public void EndOfTransaction(TransactionResult transactionResult, Device device)\n            {\n                // The object TransactionResult stores the different receipts\n                // Other information can be accessed through this object like the transaction ID, the amount...\n            }\n        }\n    }\n')),(0,r.kt)("h3",{id:"lets-create-a-user-interface-2"},"Let's create a User Interface!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Create buttons")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Go to your user interface (usually Form1.cs","[Design]",")"),(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox"),(0,r.kt)("li",{parentName:"ul"},"In the toolbox, under \u201cCommon Controls\u201d drag and drop 5 button items to the user interface"),(0,r.kt)("li",{parentName:"ul"},'Select "button1" > Right-Click > Properties'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button1" to "ConnectToSimulator"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button1" to "Connect To Simulator"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button2" to "PayWithSignatureAuthorized"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button2" to "Pay With Signature Authorized"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button3" to "PayWithSignatureDeclined"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button3" to "Pay With Signature Declined"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button4" to "PayWithPinAuthorized"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button4" to "Pay With Pin Authorized"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "button5" to "PayWithPinDeclined"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "button5" to "Pay With Pin Declined"')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Create WebBrowsers")),(0,r.kt)("p",null,"Now that we have our 5 buttons let\xb4s create two webBrowsers items to display the merchant receipt as well as the cardholder\xb4s receipt at the end of the transaction."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox > Common Controls > WebBrowser"),(0,r.kt)("li",{parentName:"ul"},"Drag and drop two web browsers to the user interface"),(0,r.kt)("li",{parentName:"ul"},"Select View > Toolbox > Common Controls > Label"),(0,r.kt)("li",{parentName:"ul"},"Drag and drop two labels to the user interface in order to identify the webBrowser items"),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from the left webBrowser to "MerchantReceiptBrowser"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from the right webBrowser to "CardholderReceiptBrowser"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "label1" to "MerchantReceiptLabel"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "label1" to "Merchant Receipt :"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "Name" from "label2" to "CardholderReceiptLabel"'),(0,r.kt)("li",{parentName:"ul"},'Change the attribute "text" from "label2" to "Cardholder Receipt :"')),(0,r.kt)("h3",{id:"lets-link-our-user-interface-with-methods-2"},"Let's link our user interface with methods!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Referencing the user interface(Form1.cs) in MyClass")),(0,r.kt)("p",null,"In MyClass.cs, create an instance of Form1 called UIClass and initialize it. Instantiate MyClass and add form1 as a parameter for the Class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    class MyClass : Events.Required\n        {\n            Hapi api;\n            private Form1 UIClass;\n\n            public MyClass(Form1 form1)\n            {\n                InitApi();\n                UIClass = form1;\n            }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Referencing Myclass in Form1.cs and link methods to the user interface")),(0,r.kt)("p",null,"Go to Form1.cs","[Design]",' and double click on the button "Connect To Simulator". By Double Clicking on the "Connect To Simulator" button you created a method called ConnectToSimulator_Click. Create a new instance of MyClass called "my" in Form1.cs then, inside the new method ConnectToSimulator_Click call the Connect() method from MyClass.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel;\n    using System.Data;\n    using System.Drawing;\n    using System.Linq;\n    using System.Text;\n    using System.Windows.Forms;\n    namespace GettingStartedWithSimulator\n    {\n        public partial class Form1 : Form\n        {\n            MyClass my;\n\n            public Form1()\n            {\n                InitializeComponent();\n                my = new MyClass(this);\n            }\n            private void ConnectToSimulator_Click(object sender, EventArgs e)\n            {\n                my.Connect();\n            }\n        }\n    }\n")),(0,r.kt)("p",null,"Go back to Form1.cs","[Design]"," and double click on each of the other buttons to automatically generate an OnClick method in Form1.cs. Link each of the buttons to the correct methods in MyClass.cs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel;\n    using System.Data;\n    using System.Drawing;\n    using System.Linq;\n    using System.Text;\n    using System.Windows.Forms;\n    namespace GettingStartedWithSimulator\n    {\n        public partial class Form1 : Form\n        {\n            MyClass my;\n            public Form1()\n            {\n                InitializeComponent();\n                my = new MyClass(this);\n            }\n            private void ConnectToSimulator_Click(object sender, EventArgs e)\n            {\n                my.Connect();\n            }\n            private void PayWithSignatureAuthorized_Click(object sender, EventArgs e)\n            {\n                my.PayWithSignatureAuthorized();\n            }\n            private void PayWithSignatureDeclined_Click(object sender, EventArgs e)\n            {\n                my.PayWithSignatureDeclined();\n            }\n            private void PayWithPinAuthorized_Click(object sender, EventArgs e)\n            {\n                my.PayWithPinAuthorized();\n            }\n            private void PayWithPinDeclined_Click(object sender, EventArgs e)\n            {\n                my.PayWithPinDeclined();\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"lets-display-the-receipts-at-the-end-of-a-transaction-2"},"Let\xb4s display the receipts at the end of a transaction!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Fetch the cardholder's and merchant receipts from the method EndOfTransaction in MyClass")),(0,r.kt)("p",null,"At this point all the buttons are connected but we are still missing to display the receipts in the webBrowsers. First, let\xb4s get the receipts from the method EndOfTransaction in myClass.cs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    public void EndOfTransaction(TransactionResult transactionResult, Device device)\n            {\n                UIClass.DisplayReceipts(transactionResult.MerchantReceipt, transactionResult.CustomerReceipt);\n            }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Create the DisplayReceipts method in form1.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    public delegate void UpdateReceiptsCallback(string MerchantReceipt, string CustomerReceipt);\n            public void DisplayReceipts(string MerchantReceipt, string CustomerReceipt)\n            {\n                //Only need to check for one of the webBrowsers\n                if (MerchantReceiptBrowser.InvokeRequired)\n                {\n                    UpdateReceiptsCallback d = new UpdateReceiptsCallback(DisplayReceipts);\n                    this.Invoke(d, new object[] { MerchantReceipt, CustomerReceipt });\n                }\n                else\n                {\n                    MerchantReceiptBrowser.DocumentText = MerchantReceipt;\n                    CardholderReceiptBrowser.DocumentText = CustomerReceipt;\n                }\n            }\n")),(0,r.kt)("h3",{id:"final-result-2"},"Final Result!"),(0,r.kt)("p",null,"Here is how MyClass.cs and Form1.cs must eventually look like :"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. MyClass.cs :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using com.handpoint.api;\n    namespace GettingStartedWithSimulator\n    {\n        class MyClass : Events.Required\n        {\n            Hapi api;\n            private Form1 UIClass;\n            public MyClass(Form1 form1)\n            {\n                InitApi();\n                UIClass = form1;\n            }\n\n            public void InitApi()\n            {\n                string sharedSecret = "0102030405060708091011121314151617181920212223242526272829303132";\n                api = HapiFactory.GetAsyncInterface(this, new HandpointCredentials(sharedSecret));\n                // The api is now initialized. Yay! we\'ve even set a default shared secret!\n                // The shared secret is a unique string shared between the card reader and your mobile application.\n                // It prevents other people to connect to your card reader.\n            }\n\n            public void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n            {\n                // Only needed when using a payment terminal\n                //Here you get a list of Bluetooth payment terminals paired with your PC\n                // You can also get a list of serial / USB payment terminals attached to your computer\n\n            }\n\n            public void Connect()\n            {\n                Device device = new Device("Name", "Address", "Port", ConnectionMethod.SIMULATOR);\n                api.UseDevice(device);\n            }\n\n            public bool PayWithSignatureAuthorized()\n            {\n                return api.Sale(new BigInteger("10000"), Currency.GBP);\n                // amount X00XX where X represents an integer [0;9] --\x3e Signature authorized\n            }\n\n            public bool PayWithSignatureDeclined()\n            {\n                return api.Sale(new BigInteger("10100"), Currency.GBP);\n                // amount X01XX where X represents an integer [0;9] --\x3e Signature declined\n            }\n\n            public bool PayWithPinAuthorized()\n            {\n                return api.Sale(new BigInteger("11000"), Currency.GBP);\n                // amount X10XX where X represents an integer [0;9] --\x3e PIN authorized\n            }\n            public bool PayWithPinDeclined()\n            {\n                return api.Sale(new BigInteger("11100"), Currency.GBP);\n                // amount X11XX where X represents an integer [0;9] --\x3e PIN declined\n            }\n\n            public void SignatureRequired(SignatureRequest signatureRequest, Device device)\n            {\n                // You\'ll be notified here if a sale process needs a signature verification\n                // A signature verification is needed if the cardholder uses an MSR or a chip & signature card\n                // This method will not be invoked if a transaction is made with a Chip & PIN card\n\n\n                api.SignatureResult(true); // This line means that the cardholder ALWAYS accepts to sign the receipt.\n                // A specific line will be displayed on the merchant receipt for the cardholder to be able to sign it\n            }\n\n            public void EndOfTransaction(TransactionResult transactionResult, Device device)\n            {\n                UIClass.DisplayReceipts(transactionResult.MerchantReceipt, transactionResult.CustomerReceipt);\n            }\n        }\n    }\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Form1.cs :")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel;\n    using System.Data;\n    using System.Drawing;\n    using System.Linq;\n    using System.Text;\n    using System.Windows.Forms;\n    namespace GettingStartedWithSimulator\n    {\n        public partial class Form1 : Form\n        {\n            MyClass my;\n            public Form1()\n            {\n                InitializeComponent();\n                my = new MyClass(this);\n            }\n            private void ConnectToSimulator_Click(object sender, EventArgs e)\n            {\n                my.Connect();\n            }\n            private void PayWithSignatureAuthorized_Click(object sender, EventArgs e)\n            {\n                my.PayWithSignatureAuthorized();\n            }\n            private void PayWithSignatureDeclined_Click(object sender, EventArgs e)\n            {\n                my.PayWithSignatureDeclined();\n            }\n            private void PayWithPinAuthorized_Click(object sender, EventArgs e)\n            {\n                my.PayWithPinAuthorized();\n            }\n            private void PayWithPinDeclined_Click(object sender, EventArgs e)\n            {\n                my.PayWithPinDeclined();\n            }\n\n            public delegate void UpdateReceiptsCallback(string MerchantReceipt, string CustomerReceipt);\n            public void DisplayReceipts(string MerchantReceipt, string CustomerReceipt)\n            {\n                //Only need to check for one of the webbrowsers\n                if (MerchantReceiptBrowser.InvokeRequired)\n                {\n                    UpdateReceiptsCallback d = new UpdateReceiptsCallback(DisplayReceipts);\n                    this.Invoke(d, new object[] { MerchantReceipt, CustomerReceipt });\n                }\n                else\n                {\n                    MerchantReceiptBrowser.DocumentText = MerchantReceipt;\n                    CardholderReceiptBrowser.DocumentText = CustomerReceipt;\n                }\n            }\n        }\n    }\n")),(0,r.kt)("h3",{id:"lets-run-our-program-2"},"Let's run our program!"),(0,r.kt)("p",null,'Run the program by clicking the "play" button, click on "Connect to simulator" and then Click on one of the payment types available and have a look at the receipts! Voila!'))}p.isMDXComponent=!0}}]);