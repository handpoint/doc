"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6116],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,k=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7286:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:8,id:"windowsevents"},s="Events",d={unversionedId:"windowsevents",id:"version-Windows SDK 3.1.7/windowsevents",title:"Events",description:"Transaction Result Recovery over CLOUD connection",source:"@site/windows_versioned_docs/version-Windows SDK 3.1.7/windowsevents.md",sourceDirName:".",slug:"/windowsevents",permalink:"/doc/windows/windowsevents",tags:[],version:"Windows SDK 3.1.7",sidebarPosition:8,frontMatter:{sidebar_position:8,id:"windowsevents"},sidebar:"version-Windows SDK 3.1.7/tutorialSidebar",previous:{title:"Events subscribers",permalink:"/doc/windows/windowseventssubscribers"},next:{title:"Objects",permalink:"/doc/windows/windowobjects"}},p=[{value:"Transaction Result Recovery over CLOUD connection",id:"transaction-result-recovery-over-cloud-connection",children:[],level:2},{value:"Device discovery finished",id:"13",children:[{value:"Parameters",id:"parameters",children:[],level:5}],level:2},{value:"Signature required",id:"5",children:[{value:"Parameters",id:"parameters-1",children:[],level:4}],level:2},{value:"End of transaction",id:"6",children:[{value:"Parameters",id:"parameters-2",children:[],level:4}],level:2},{value:"Connection status changed",id:"7",children:[{value:"Parameters",id:"parameters-3",children:[],level:4}],level:2},{value:"Current transaction status",id:"4",children:[{value:"Parameters",id:"parameters-4",children:[],level:4}],level:2},{value:"Message logged",id:"message-logged",children:[{value:"Parameters",id:"parameters-5",children:[],level:4}],level:2},{value:"Logs ready",id:"10",children:[{value:"Parameters",id:"parameters-6",children:[],level:4}],level:2},{value:"Pending transaction result",id:"pending-transaction-result",children:[{value:"Parameters",id:"parameters-7",children:[],level:4}],level:2},{value:"Transaction result ready",id:"11",children:[{value:"Parameters",id:"parameters-8",children:[],level:4}],level:2}],c={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"events"},"Events"),(0,i.kt)("h2",{id:"transaction-result-recovery-over-cloud-connection"},"Transaction Result Recovery over CLOUD connection"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CloudTransactionResultRecovery")),(0,i.kt)("p",null,"The terminal has a transaction recovery loop to automatically send back the pending ",(0,i.kt)("a",{parentName:"p",href:"/doc/windows/windowobjects#14"},(0,i.kt)("em",{parentName:"a"},"Transaction Result"))," to the Point of sale in case it becomes unreachable (network issue or other).\nFor the first 100 seconds after a transaction is completed, a background thread will attempt to deliver the result every 5 seconds. If the point of sale is still unreachable after the first 100 seconds, the retry loop turns into an exponential increment to the power of 2 (8s-16s-32s etc\u2026).\nThe recovery loop is reinitialized every time the Handpoint application is restarted.The ",(0,i.kt)("a",{parentName:"p",href:"/doc/windows/windowobjects#14"},(0,i.kt)("em",{parentName:"a"},"Transaction Result"))," received through the transaction recovery loop will have the recoveredTransaction field set to true."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Important information: The point of sale must be successfully connected to a terminal in order to receive the pending transactions.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/doc/windows/windowsevents#11"},(0,i.kt)("em",{parentName:"a"},"Transaction Result Ready Event")))),(0,i.kt)("p",null,"Event containing the pending ",(0,i.kt)("a",{parentName:"p",href:"/doc/windows/windowobjects#14"},(0,i.kt)("em",{parentName:"a"},"Transaction Result"))),(0,i.kt)("h2",{id:"13"},"Device discovery finished"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"deviceDiscoveryFinished")),(0,i.kt)("p",null,"deviceDiscoveryFinished event gets called when a device discovery has finished and returns a list of devices."),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"device")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#2"},(0,i.kt)("em",{parentName:"a"},"Device"))),(0,i.kt)("td",{parentName:"tr",align:null},"The device that is invoking the event")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"//Receiving a list of connectable devices\nList<Device> myListOfDevices = new List<Device>();\npublic void **[*deviceDiscoveryFinished*](#13)**(List<Device> devices)\n{\n    foreach(Device device in devices)\n    {\n        myListOfDevices.Add(device);\n    }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Subscribers Needed")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#16"},(0,i.kt)("em",{parentName:"a"},"AddRequiredEventHandler")))," "),(0,i.kt)("p",null,"This listener has to be implemented (preferably during initialisation) in order to retrieve the devices information."),(0,i.kt)("h2",{id:"5"},"Signature required"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SignatureRequired")),(0,i.kt)("p",null,"SignatureRequired event gets called when a card requires a signature instead of PIN entry and has two parameters, request and device. Integrations with PAX or Telpo devices DO NOT need the implementation of this event."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"request")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#17"},(0,i.kt)("em",{parentName:"a"},"SignatureRequest"))),(0,i.kt)("td",{parentName:"tr",align:null},"Holds the signature request")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"device")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#2"},(0,i.kt)("em",{parentName:"a"},"Device"))),(0,i.kt)("td",{parentName:"tr",align:null},"The device that is invoking the event")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"//Receiving a SignatureRequest from the SDK.\npublic void SignatureRequired(SignatureRequest signatureRequest, Device device)\n{\n    //You might want to print out the receipt or ask the customer to sign the receipt on your device\n    DisplayReceiptInUI(signatureRequest.MerchantReceipt)\n    //If you accept the signature\n    api.SignatureResult(true);\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Subscribers Needed")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#16"},(0,i.kt)("em",{parentName:"a"},"AddRequiredEventHandler")))," "),(0,i.kt)("p",null,"This listener has to be implemented (preferably during initialisation) in order to retrieve signature information."),(0,i.kt)("h2",{id:"6"},"End of transaction"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"EndOfTransaction")),(0,i.kt)("p",null,"EndOfTransaction event gets called at the end of each transaction and has two parameters, result and device."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"result")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#14"},(0,i.kt)("em",{parentName:"a"},"TransactionResult"))),(0,i.kt)("td",{parentName:"tr",align:null},"Holds the results for the transaction")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"device")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#2"},(0,i.kt)("em",{parentName:"a"},"Device"))),(0,i.kt)("td",{parentName:"tr",align:null},"The device that is invoking the event")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"//Receiving a TransactionResult from the SDK.\npublic void EndOfTransaction(TransactionResult transactionResult, Device device)\n{\n    //You might want to display this information in the UI\n    postTransactionResultToUI(transactionResult);\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Subscribers Needed")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#16"},(0,i.kt)("em",{parentName:"a"},"AddRequiredEventHandler")))," "),(0,i.kt)("p",null,"This listener has to be implemented (preferably during initialisation) in order to retrieve signature information."),(0,i.kt)("h2",{id:"7"},"Connection status changed"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionStatusChanged")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#7"},(0,i.kt)("em",{parentName:"a"},"ConnectionStatusChanged")))," event gets called when the state of a card reader connection changes."),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"status")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#18"},(0,i.kt)("em",{parentName:"a"},"ConnectionStatus"))),(0,i.kt)("td",{parentName:"tr",align:null},"An enum containing the status code for the connection")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"device")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#2"},(0,i.kt)("em",{parentName:"a"},"Device"))),(0,i.kt)("td",{parentName:"tr",align:null},"The device that is invoking the event")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"//Receiving a new ConnectionStatus from the SDK\npublic void **[*ConnectionStatusChanged*](#7)**(ConnectionStatus connectionStatus, Device device)\n{\n    //You might want to display this information in the UI\n    postNewStatusToUI(connectionStatus);\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Subscribers Needed")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#19"},(0,i.kt)("em",{parentName:"a"},"AddStatusNotificationEventHandler")))," "),(0,i.kt)("p",null,"This listener has to be implemented (preferably during initialisation) in order to retrieve the different connection statuses (e.g : CONNECTED, DISCONNECTED...)."),(0,i.kt)("h2",{id:"4"},"Current transaction status"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CurrentTransactionStatus")),(0,i.kt)("p",null,"currentTransactionStatus event gets called when the state of an ongoing transaction changes."),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"statusInfo")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#18"},(0,i.kt)("em",{parentName:"a"},"ConnectionStatus"))),(0,i.kt)("td",{parentName:"tr",align:null},"An object containing information about the current transaction")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"device")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#2"},(0,i.kt)("em",{parentName:"a"},"Device"))),(0,i.kt)("td",{parentName:"tr",align:null},"The device that is invoking the event")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"//Receiving a transaction status from the SDK.\npublic void currentTransactionStatus(StatusInfo statusInfo, Device device)\n{\n    //You might want to display some of this information in the UI\n    DisplayTransactionStatusInUI(statusInfo)\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Subscribers Needed")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#19"},(0,i.kt)("em",{parentName:"a"},"AddStatusNotificationEventHandler")))),(0,i.kt)("p",null,"This listener has to be implemented (preferably during initialisation) in order to retrieve the different states from the card reader (e.g : Waiting for card, Waiting for PIN entry...)."),(0,i.kt)("h2",{id:"message-logged"},"Message logged"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"OnMessageLogged")),(0,i.kt)("p",null,"OnMessageLogged event gets called for all log messages that are being logged. This is only intended for debugging."),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"logLevel")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#9"},(0,i.kt)("em",{parentName:"a"},"LogLevel"))),(0,i.kt)("td",{parentName:"tr",align:null},"An enum containing the log level")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"message")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"A String containing the current log message")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"//Receiving a log from the SDK\npublic void OnMessageLogged(LogLevel logLevel, String message)\n{\n    //You do not want to display this information in the UI\n    Debug.WriteLine(message);\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Subscribers Needed")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#20"},(0,i.kt)("em",{parentName:"a"},"AddLogEventHandler")))," "),(0,i.kt)("p",null,"This listener has to be implemented (preferably during initialisation) in order to retrieve the different log messages."),(0,i.kt)("h2",{id:"10"},"Logs ready"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DeviceLogsReady")),(0,i.kt)("p",null,"DeviceLogsReady event gets called when the card reader logs requested by a call to getDeviceLogs() are ready. This Event is really useful if there has been a communication error between the card reader and the API (e.g : Bluetooth communication lost). After reconnecting, you can then fetch the card reader logs to the API."),(0,i.kt)("h4",{id:"parameters-6"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"logs")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("em",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"String containing the current log")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"device")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#2"},(0,i.kt)("em",{parentName:"a"},"Device"))),(0,i.kt)("td",{parentName:"tr",align:null},"The device that is invoking the event")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"//Receiving a log from the device\npublic void **[*DeviceLogsReady*](#10)**(string logs, Device device)\n{\n    //You might want to save this information\n    WriteLogsToDisk(logs);\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Subscribers Needed")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#20"},(0,i.kt)("em",{parentName:"a"},"AddLogEventHandler")))," "),(0,i.kt)("p",null,"This listener has to be implemented (preferably during initialisation) in order to retrieve the card reader logs."),(0,i.kt)("h2",{id:"pending-transaction-result"},"Pending transaction result"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PendingTransactionResult")),(0,i.kt)("p",null,"In the case of a communication failure between the device and the API a TransactionResult might have not been delivered to the API. This event is invoked when the device has a pending TransactionResult. This event might be invoked when reconnecting to a device after a communication failure during a transaction. This event will not be called if HapiManager.Settings.AutoRecoverTransactionResult is set to true."),(0,i.kt)("h4",{id:"parameters-7"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"device")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#2"},(0,i.kt)("em",{parentName:"a"},"Device"))),(0,i.kt)("td",{parentName:"tr",align:null},"The device that is invoking the event")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"@Override\npublic void PendingTransactionResult(Device device){\n    //Here you might want to call api.GetPendingTransaction(); to receive the TransactionResult\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Subscribers Needed")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"#21"},(0,i.kt)("em",{parentName:"a"},"AddPendingResultsEventHandler")))," "),(0,i.kt)("p",null,"This listener has to be implemented (preferably during initialisation) in order to retrieve information about pending results."),(0,i.kt)("h2",{id:"11"},"Transaction result ready"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TransactionResultReady")),(0,i.kt)("p",null,"In the case of a communication failure between the device and the API a TransactionResult might have not been delivered to the API. This event will be invoked after using hapi.GetPendingTransaction();. When there is no pending transaction the TransactionResult will contain default/error fields and no receipts. This event is called if HapiManager.Settings.AutoRecoverTransactionResult is set to true."),(0,i.kt)("h4",{id:"parameters-8"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"result")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#14"},(0,i.kt)("em",{parentName:"a"},"TransactionResult"))),(0,i.kt)("td",{parentName:"tr",align:null},"Holds the results for the transaction")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"device")," ",(0,i.kt)("span",{class:"badge badge--primary"},"Required"),(0,i.kt)("br",null),(0,i.kt)("a",{parentName:"td",href:"/doc/windows/windowobjects#2"},(0,i.kt)("em",{parentName:"a"},"Device"))),(0,i.kt)("td",{parentName:"tr",align:null},"The device that is invoking the event")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"@Override\npublic void TransactionResultReady(TransactionResult transactionResult, Device device){\n    //Here you might want to do stuff to the transactionResult\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Subscribers Needed")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"AddPendingResultsEventHandler")," "),(0,i.kt)("p",null,"This listener has to be implemented (preferably during initialisation) in order to retrieve information about pending results."))}u.isMDXComponent=!0}}]);